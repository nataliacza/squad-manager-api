from typing import List

from fastapi import APIRouter
from pydantic import ValidationError
from sqlmodel import Session, select
from starlette.background import BackgroundTasks
from starlette.responses import JSONResponse

from app.core.database import engine
from app.helpers.autogenerated_courses import generate_courses
from app.models.core_models import Member, Course, Dog
from app.schemas.courses import CourseReadDto, UpdateCourseDto
from app.schemas.members import (CreateMemberDto, UpdateMemberDetailsDto, MemberDetailsReadDto, MemberListViewDto,
                                 MemberResponseDto)

members_router = APIRouter(prefix="/members",
                           tags=["Members"])


@members_router.post(path="/",
                     response_model=MemberResponseDto,
                     summary="Add new member",
                     status_code=201,
                     responses={201: {"detail": "Created"},
                                401: {"detail": "Unauthorized"},
                                400: {"detail": "Bad Request"},
                                405: {"detail": "Method Not Allowed"}})
async def add_member(member_details: CreateMemberDto, background_tasks: BackgroundTasks):

    with Session(engine) as session:
        try:
            new_member = Member.from_orm(member_details)
            session.add(new_member)
            session.commit()
            session.refresh(new_member)

            background_tasks.add_task(generate_courses, new_member.id)

            return new_member

        except ValidationError as error:
            return error


@members_router.get(path="/",
                    response_model=List[MemberListViewDto],
                    summary="Get all members with details",
                    status_code=200,
                    responses={200: {"detail": "Successful operation"},
                               401: {"detail": "Unauthorized"},
                               405: {"detail": "Method Not Allowed"}})
async def get_all_members():

    # TODO: extract only 4 main courses?
    with Session(engine) as session:
        members = session.exec(select(Member)).all()
        return members


@members_router.get(path="/{member_id}/details",
                    response_model=MemberDetailsReadDto,
                    summary="Get member by id",
                    status_code=200,
                    responses={200: {"detail": "Successful operation"},
                               401: {"detail": "Unauthorized"},
                               404: {"detail": "Not Found"},
                               405: {"detail": "Method Not Allowed"}})
async def get_member_details(member_id: int):

    with Session(engine) as session:
        get_member = session.get(Member, member_id)

        if get_member:
            return get_member

        return JSONResponse(status_code=404, content={"detail": "Id Not Found"})


@members_router.delete(path="/{member_id}",
                       summary="Delete member",
                       description="On deletion, all assigned courses will be removed. Unable to delete, \
                       if has any Dogs assigned.",
                       status_code=204,
                       responses={204: {"detail": "No content"},
                                  401: {"detail": "Unauthorized"},
                                  404: {"detail": "Not Found"},
                                  405: {"detail": "Method Not Allowed"},
                                  409: {"detail": "Conflict"}})
async def delete_member(member_id: int):

    with Session(engine) as session:
        get_member = session.get(Member, member_id)

        if get_member:
            get_dog = session.exec(select(Dog).where(Dog.owner_id == get_member.id)).first()
            if get_dog:
                return JSONResponse(status_code=409, content={"detail": "Unable to proceed. Dog assigned to Member"})
            session.delete(get_member)
            session.commit()
            return {}

        return JSONResponse(status_code=404, content={"detail": "Id Not Found"})


@members_router.put(path="/{member_id}/details",
                    response_model=MemberResponseDto,
                    summary="Update member details",
                    status_code=200,
                    responses={200: {"detail": "Successful operation"},
                               401: {"detail": "Unauthorized"},
                               404: {"detail": "Not Found"},
                               405: {"detail": "Method Not Allowed"}})
async def update_member_details(member_id: int, update_member: UpdateMemberDetailsDto):

    with Session(engine) as session:
        get_member = session.get(Member, member_id)

        if get_member:
            try:
                new_data = update_member.dict()
                for key, value in new_data.items():
                    setattr(get_member, key, value)
                session.add(get_member)
                session.commit()
                session.refresh(get_member)

                return get_member

            except ValidationError as error:
                return error

        return JSONResponse(status_code=404, content={"detail": "Id Not Found"})


@members_router.put(path="/{member_id}/courses/{course_id}",
                    response_model=CourseReadDto,
                    summary="Update single course",
                    status_code=200,
                    responses={200: {"detail": "Successful operation"},
                               401: {"detail": "Unauthorized"},
                               404: {"detail": "Not Found"},
                               405: {"detail": "Method Not Allowed"}})
async def update_course_details(*, member_id: int, course_id: int, update_course: UpdateCourseDto):

    with Session(engine) as session:
        get_member = session.get(Member, member_id)

        if get_member:
            get_course = session.get(Course, course_id)
            if get_course:
                try:
                    new_course_data = update_course.dict()
                    for key, value in new_course_data.items():
                        setattr(get_course, key, value)
                    session.add(get_course)
                    session.commit()
                    session.refresh(get_course)
                    return get_course

                except ValidationError as error:
                    return error

            return JSONResponse(status_code=404, content={"detail": "Course Id Not Found"})

        return JSONResponse(status_code=404, content={"detail": "Member Id Not Found"})


@members_router.get(path="/{member_id}/courses",
                    response_model=List[CourseReadDto],
                    summary="Get member course list",
                    status_code=200,
                    responses={200: {"detail": "Successful operation"},
                               401: {"detail": "Unauthorized"},
                               404: {"detail": "Not Found"},
                               405: {"detail": "Method Not Allowed"}})
async def get_member_courses(member_id: int):

    with Session(engine) as session:
        get_member = session.get(Member, member_id)

        if get_member:
            courses = session.exec(select(Course).where(Course.member_id == member_id)).all()
            return courses

        return JSONResponse(status_code=404, content={"detail": "Id Not Found"})
